@using Zelenko30331_lab.Blazor.Components;
@using Zelenko30331_lab.Domain.Entities;
@using Zelenko30331_lab.Blazor.Servises;
@implements IDisposable
@rendermode InteractiveServer

<div class="btn-group" role="group" aria-label="Pager">
<!-- Кнопка Previous -->
<button type="button" class="btn btn-outline-primary
@(previousEnabled?"":"disabled")"
            @onclick="@(e=>OnPageSelected(ProductServie.CurrentPage-1))">
<span aria-hidden="true">&laquo;</span>
</button>
    @for (int i = 1; i <= ProductServie.TotalPages; i++)
{
var temp = i;
<button type="button" class="btn btn-outline-primary
@(IsActive(temp)?"active":"")"
@onclick="@(e=>OnPageSelected(temp))">
@temp
</button>
}
<!-- Кнопка Next -->
<button type="button" class="btn btn-outline-primary
@(nextEnabled?"":"disabled")"
            @onclick="@(e=>OnPageSelected(ProductServie.CurrentPage+1))">
<span aria-hidden="true">&raquo;</span>
</button>
</div>
@code {
[CascadingParameter]
    public IProductService<Dish> ProductServie { get; set; }
protected override void OnInitialized()
{
        ProductServie.ListChanged += StateHasChanged;
    }
    // Кнопка Previous доступна?
    bool previousEnabled { get => ProductServie.CurrentPage != 1; }
    // Кнопка Next доступна
    bool nextEnabled
    {
        get => ProductServie.CurrentPage !=
    ProductServie.TotalPages;
    }
    // Это текущая страница?
    bool IsActive(int pageNo) => pageNo == ProductServie.CurrentPage;
    // Обработчик клика кнопки
    async void OnPageSelected(int pageNo)
    {
        await ProductServie.GetProducts(pageNo);
    }
    public void Dispose()
    {
        ProductServie.ListChanged -= StateHasChanged;
    }
}
